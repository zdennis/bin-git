#!/usr/bin/env ruby

require 'optparse'
require 'date'

def require_or_install(name, version:, require_as: name)
  require require_as
rescue LoadError => ex
  begin
    puts "Missing gem #{name}. Installing #{name} #{version}..."
    system "gem install #{name} -v #{version}"
    Gem.refresh
    require require_as
  rescue => ex
    puts ex
    puts "#{name} #{version} could not be installed. You will need to install it manually."
    exit 1
  end
end

require_or_install 'term-ansicolor', version: '1.7.1', require_as: 'term/ansicolor'

SCRIPT_NAME = File.basename(__FILE__)

options = {
  list: false,
  remote: nil,
  tag: nil
}
OptionParser.new do |opts|
  opts.banner = "Usage: #{SCRIPT_NAME} [options] [branch-name]"

  opts.on("-t=TAG", "--tag=TAG", "Tags the backup with a description that is appended to the branch name") do |tag|
    options[:tag] = ".#{tag.strip.downcase.gsub(/\s+/, '-')}"
  end

  opts.on("-l", "--list", "Lists backup branches for current or specified branch") do
    options[:list] = true
  end

  opts.on("-r", "--remote", "Use the remote branch instead of the local branch.") do
    options[:remote] = "origin"
  end

  opts.on("-h", "--help", "Prints help message") do
    main_branch = `git get-main-branch`.chomp

    puts <<~HELP
      #{SCRIPT_NAME} is used to create or list backup branches. It will use the current branch if no branch name
      is provided otherwise it will use the branch name provided.

      Examples:

        #{Term::ANSIColor.bold("# Backup current branch")}
        #{SCRIPT_NAME}

        #{Term::ANSIColor.bold("# Backup specific branch")}
        #{SCRIPT_NAME} features/sign-up

        #{Term::ANSIColor.bold("# Backup the remote branch for the current branch")}
        #{SCRIPT_NAME} -r

        #{Term::ANSIColor.bold("# Backup the remote branch for a specific branch")}
        #{SCRIPT_NAME} -r features/sign-up

        #{Term::ANSIColor.bold("# Backup a branch and tag it with an extra descriptor")}
        #{SCRIPT_NAME} -t "before #{main_branch} rebase"

        #{Term::ANSIColor.bold("# List all known backup branches for the current branch")}
        #{SCRIPT_NAME} -l

        #{Term::ANSIColor.bold("# List all known backup branches for a specific branch")}
        #{SCRIPT_NAME} -l features/sign-up
    HELP
    puts
    puts opts
    exit
  end
end.parse!

branch = ARGV.shift || `git current-branch`.chomp
todays_date = Date.today.to_s

if branch.to_s.empty?
  STDERR.puts Term::ANSIColor.red <<~ERROR.chomp
    The branch name to backup could not be determined. Please provide the specific branch
    name. See #{SCRIPT_NAME} --help for more information.
  ERROR
  exit 1
end

def branch_exists?(name)
  `git branch -a`.lines.grep(/#{Regexp.escape(name)}/).any?
end

if options.fetch(:list)
  backup_branches = `git branch`.lines.grep(/#{Regexp.escape(branch)}.bak/)
  puts backup_branches.map(&:strip)
  exit 0
end

if options[:remote]
  backup_branch = "#{branch}.bak.remote"
  branch = "#{options[:remote]}/#{branch}"
else
  backup_branch = "#{branch}.bak"
end

count = 0
max_tries = 50
backup_branch_was = backup_branch.dup
loop do
  if branch_exists?(backup_branch)
    puts Term::ANSIColor.bright_black <<~MESSAGE.chomp
      #{backup_branch} exists
    MESSAGE

    backup_branch = "#{backup_branch_was}.bak#{count+=1}"
    if count >= max_tries
      puts Term::ANSIColor.red <<~ERROR.chomp
        Exhausted attempts to create a backup branch!
        You may need to do some cleanup.
      ERROR
      exit 1
    end
  else
    break
  end
end

backup_branch += ".#{todays_date}"
backup_branch_with_tag = [backup_branch, options.fetch(:tag)].compact.join
command = "git branch #{backup_branch_with_tag} #{branch}"
puts command
if system(command)
  puts Term::ANSIColor.green <<~SUCCESS.chomp
    Successfully backed up to #{backup_branch_with_tag}
  SUCCESS
else
  puts Term::ANSIColor.red <<~ERROR.chomp
    Failed to backup #{branch} with command: #{command}
  ERROR
  exit 1
end
