#!/usr/bin/env ruby

require 'json'

if `which octo`.empty?
  puts <<~MESSAGE
    The octo command is not found. Possible installation methods:

        # via homebrew
        brew install octo-cli/octo/octo

        # via curl
        curl https://raw.githubusercontent.com/octo-cli/octo-cli/master/download.sh | sh

    More more installation options see https://github.com/octo-cli/octo-cli
  MESSAGE
  exit 1
end

ARGV_PROVIDED_SHA_OR_REF = ARGV.shift
SHA_OR_REF = ARGV_PROVIDED_SHA_OR_REF || `git sha`.chomp

ENV['GITHUB_TOKEN'] ||= `git config github.token`.chomp

if ENV['GITHUB_TOKEN'].empty?
  fail <<~ERROR
    Missing github token! The octo command requires it. It can be set in
    your environment or set as `git config github.token YOUR_TOKEN`.
  ERROR
end

if SHA_OR_REF =~ /^\d+$/
  # when SHA_OR_REF is a PR number itself
  open `git pull-url $SHA_OR_REF`
else
  repos = `git config remote.origin.url`.scan(/github.com[:\/](.*)/).flatten.first.to_s.sub('.git', '')
  if repos.empty?
    puts "The origin url could not be extracted running `git config remote.origin.url`"
    exit 1
  end

  if ARGV_PROVIDED_SHA_OR_REF
    octo_command = "octo repos list-pull-requests-associated-with-commit --groot-preview --repo=#{repos} --commit_sha=#{SHA_OR_REF}"
    json_response = `#{octo_command}`
    response_data = JSON.parse(json_response)

    if response_data.is_a?(Hash) && response_data['message'] =~ /no commit found/i
      puts response_data['message']
      exit 1
    end
  else
    org_name = `git github-org-name`.chomp
    branch_name = `git rev-parse --abbrev-ref HEAD`.chomp
    octo_command = "octo pulls list --repo=#{repos} --head='#{org_name}:#{branch_name}'"
    json_response = `#{octo_command}`
    response_data = JSON.parse(json_response)
    if response_data.length == 0
      system "open `git pull-url`"
      exit 0
    end
  end

  existing_pull_requests = response_data
  case existing_pull_requests.length
  when 0
    system "open `git pull-url`"
  when 1
    pull_request_href = existing_pull_requests.first['html_url']
    puts "Found #{pull_request_href} for #{SHA_OR_REF}", "Opening now in your system's default browser."
    system "open #{pull_request_href}"
    puts "Done."
    exit 0
  else
    puts "Found #{existing_pull_requests.length} pull requests for #{SHA_OR_REF}:"
    begin
      existing_pull_requests.each do |pull_request_data|
        puts "  - #{pull_request_data['html_url'] }"
      end
    rescue Exception => error
      fail "Failed: #{existing_pull_requests.inspect}"
    end
  end
end
