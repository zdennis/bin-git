#!/usr/bin/env ruby

require "optparse"

def install_missing_gem(name, version: nil)
  loop do
    puts "The #{name} #{version} gem is missing. Install? [Yn]"
    answer = $stdin.gets
    if answer =~ /y/i
      install_command = "gem install #{name}"
      install_command = "#{install_command} -v #{version}" if version
      system install_command
      break
    elsif answer =~ /n/i
      exit 1
    end
  end
end

def require_or_install(name, version:, require_as: name)
  require require_as
rescue LoadError
  begin
    install_missing_gem name, version: version
    Gem.refresh
    require require_as
  rescue => ex
    puts "#{name} #{version} could not be installed. You will need to install it manually."
    puts ex
    exit 1
  end
end

require_or_install 'term-ansicolor', version: '1.7.1', require_as: 'term/ansicolor'
require_or_install 'terminal-table', version: '3.0.2', require_as: 'terminal-table'

options = {
  dry_run: false,
  git_args: nil,
  file_patterns: [],
  file_types: [],
  list: false,
  include_specs_for_changed_implementation_files: false
}
OptionParser.new do |opts|
  opts.on("-f", "--file-type=FILE_TYPE", "File type/extension. Can be comma-separate or specified multiple times") do |types|
    options[:file_types].push *types.split(/,/).map(&:strip)
  end

  opts.on("-l", "--list", "List files. Default: #{options.fetch(:list)}") do
    options[:list] = true
  end

  opts.on("--pattern=PATTERN", "File name pattern to match. Can be comma-separated.") do |patterns|
    options[:file_patterns].push *patterns.split(/,/).map(&:strip)
  end

  opts.on("-n", "--dry-run", "Performs a dry run printing out what it would do") do
    options[:dry_run] = true
  end

  opts.on("-i", "--include-specs", "Include specs for changed implementation files") do
    options[:include_specs_for_changed_implementation_files] = true
  end
end.parse!

main_branch = `git get-main-branch`.chomp

options[:git_args] = case ARGV.first
  when nil
    "#{main_branch}...HEAD"
  when /\d+/
    "HEAD~#{ARGV.first}"
  when /\.\./
    ARGV.first
  else
    ARGV.join(' ')
  end


file_types = options.fetch(:file_types)
file_patterns = options.fetch(:file_patterns).map { |pattern| pattern }
file_patterns_regex = %r{#{file_patterns.join("|")}}

if options[:list]
  added = `git diff --name-only --diff-filter="A" #{options[:git_args]}`
  modified = `git diff --name-only --diff-filter="M" #{options[:git_args]}`
  deleted = `git diff --name-only --diff-filter="D" #{options[:git_args]}`

  rows = []
  rows << [added, modified, deleted]
  table = Terminal::Table.new do |table|
    table.headings = %w(ADDED MODIFIED DELETED)
    table.rows = rows
  end
  puts table
else
  output = []

  # The lowercase -d in the --diff-filter used below is for excluding deleted files.
  output.concat(`git diff --name-only --diff-filter="AMd" #{options[:git_args]}`.lines)
  output.concat(`git diff --name-only --cached --diff-filter="AMd"`.lines)


  files = output.uniq.sort.map(&:chomp)
  if file_types.any?
    files = files.select do |file|
      file_types.include?(file.split(".").last)
    end
  end

  if options[:include_specs_for_changed_implementation_files]
    all_spec_files = Dir["spec/**/*_spec.rb"]
    files.dup.each do |file|
      possible_spec_file = File.join("spec/unit/", file.sub(".rb", "_spec.rb"))
      match = all_spec_files.find { |spec_file| spec_file.match(possible_spec_file) }
      files << match if match
    end
  end

  if file_patterns.any?
    files = files.select do |file|
      file_patterns_regex.match?(file)
    end
  end

  puts files.sort.uniq
end
